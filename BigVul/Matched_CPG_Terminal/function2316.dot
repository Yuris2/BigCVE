digraph "&lt;global&gt;" {
vulnerable_6 [label=<(METHOD,&lt;global&gt;)<SUB>1</SUB>>];
vulnerable_7 [label=<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>];
vulnerable_8 [label=<(UNKNOWN,static int __init big_key_crypto_init(void)
{
	...,static int __init big_key_crypto_init(void)
{
	...)<SUB>1</SUB>>];
vulnerable_9 [label=<(METHOD_RETURN,ANY)<SUB>1</SUB>>];
vulnerable_14 [label=<(METHOD,&lt;global&gt;)<SUB>1</SUB>>];
vulnerable_15 [label=<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)>];
vulnerable_16 [label=<(METHOD_RETURN,ANY)>];
fixed_6 [label=<(METHOD,&lt;global&gt;)<SUB>1</SUB>>];
fixed_7 [label=<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>];
fixed_8 [label=<(UNKNOWN,static int __init big_key_crypto_init(void)
	st...,static int __init big_key_crypto_init(void)
	st...)<SUB>1</SUB>>];
fixed_9 [label=<(TYPE_DECL,crypto_rng)<SUB>3</SUB>>];
fixed_10 [label="<(LOCAL,struct crypto_rng* rng: crypto_rng*)<SUB>3</SUB>>"];
fixed_11 [label="<(LOCAL,int ret: int)<SUB>4</SUB>>"];
fixed_12 [label=<(UNKNOWN,rng = crypto_alloc_rng(big_key_rng_name, 0, 0);,rng = crypto_alloc_rng(big_key_rng_name, 0, 0);)<SUB>6</SUB>>];
fixed_13 [label="<(UNKNOWN,if (IS_ERR(rng)) {
		pr_err(&quot;Can't alloc rng: %...,if (IS_ERR(rng)) {
		pr_err(&quot;Can't alloc rng: %...)<SUB>7</SUB>>"];
fixed_14 [label=<(UNKNOWN,big_key_rng = rng;,big_key_rng = rng;)<SUB>12</SUB>>];
fixed_15 [label=<(UNKNOWN,ret = crypto_rng_reset(rng, NULL, crypto_rng_se...,ret = crypto_rng_reset(rng, NULL, crypto_rng_se...)<SUB>15</SUB>>];
fixed_16 [label="<(UNKNOWN,if (ret) {
		pr_err(&quot;Can't reset rng: %d\n&quot;, re...,if (ret) {
		pr_err(&quot;Can't reset rng: %d\n&quot;, re...)<SUB>16</SUB>>"];
fixed_17 [label=<(UNKNOWN,cipher = crypto_alloc_skcipher(big_key_alg_name...,cipher = crypto_alloc_skcipher(big_key_alg_name...)<SUB>22</SUB>>];
fixed_18 [label=<(UNKNOWN,if (IS_ERR(cipher)) {
		ret = PTR_ERR(cipher);
...,if (IS_ERR(cipher)) {
		ret = PTR_ERR(cipher);
...)<SUB>23</SUB>>];
fixed_19 [label=<(UNKNOWN,big_key_skcipher = cipher;,big_key_skcipher = cipher;)<SUB>29</SUB>>];
fixed_20 [label=<(UNKNOWN,ret = register_key_type(&amp;key_type_big_key);,ret = register_key_type(&amp;key_type_big_key);)<SUB>31</SUB>>];
fixed_21 [label="<(UNKNOWN,if (ret &lt; 0) {
		pr_err(&quot;Can't register type: %...,if (ret &lt; 0) {
		pr_err(&quot;Can't register type: %...)<SUB>32</SUB>>"];
fixed_22 [label=<(UNKNOWN,return 0;,return 0;)<SUB>37</SUB>>];
fixed_23 [label="<(UNKNOWN,error_cipher:
	crypto_free_skcipher(big_key_skc...,error_cipher:
	crypto_free_skcipher(big_key_skc...)<SUB>39</SUB>>"];
fixed_24 [label="<(UNKNOWN,error_rng:
 	crypto_free_rng(big_key_rng);,error_rng:
 	crypto_free_rng(big_key_rng);)<SUB>41</SUB>>"];
fixed_25 [label=<(UNKNOWN,return ret;,return ret;)<SUB>43</SUB>>];
fixed_26 [label=<(UNKNOWN,},})<SUB>44</SUB>>];
fixed_27 [label=<(METHOD_RETURN,ANY)<SUB>1</SUB>>];
fixed_39 [label=<(METHOD,&lt;global&gt;)<SUB>1</SUB>>];
fixed_40 [label=<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)>];
fixed_41 [label=<(METHOD_RETURN,ANY)>];
vulnerable_6 -> vulnerable_7  [key=0, label="AST: "];
vulnerable_6 -> vulnerable_9  [key=0, label="AST: "];
vulnerable_6 -> vulnerable_8  [key=0, label="CFG: "];
vulnerable_7 -> vulnerable_8  [key=0, label="AST: "];
vulnerable_8 -> vulnerable_9  [key=0, label="CFG: "];
vulnerable_9 -> fixed_6  [key=0];
vulnerable_14 -> vulnerable_15  [key=0, label="AST: "];
vulnerable_14 -> vulnerable_16  [key=0, label="AST: "];
vulnerable_14 -> vulnerable_16  [key=1, label="CFG: "];
vulnerable_15 -> fixed_6  [key=0];
vulnerable_16 -> fixed_6  [key=0];
fixed_6 -> fixed_7  [key=0, label="AST: "];
fixed_6 -> fixed_27  [key=0, label="AST: "];
fixed_6 -> fixed_8  [key=0, label="CFG: "];
fixed_7 -> fixed_8  [key=0, label="AST: "];
fixed_7 -> fixed_9  [key=0, label="AST: "];
fixed_7 -> fixed_10  [key=0, label="AST: "];
fixed_7 -> fixed_11  [key=0, label="AST: "];
fixed_7 -> fixed_12  [key=0, label="AST: "];
fixed_7 -> fixed_13  [key=0, label="AST: "];
fixed_7 -> fixed_14  [key=0, label="AST: "];
fixed_7 -> fixed_15  [key=0, label="AST: "];
fixed_7 -> fixed_16  [key=0, label="AST: "];
fixed_7 -> fixed_17  [key=0, label="AST: "];
fixed_7 -> fixed_18  [key=0, label="AST: "];
fixed_7 -> fixed_19  [key=0, label="AST: "];
fixed_7 -> fixed_20  [key=0, label="AST: "];
fixed_7 -> fixed_21  [key=0, label="AST: "];
fixed_7 -> fixed_22  [key=0, label="AST: "];
fixed_7 -> fixed_23  [key=0, label="AST: "];
fixed_7 -> fixed_24  [key=0, label="AST: "];
fixed_7 -> fixed_25  [key=0, label="AST: "];
fixed_7 -> fixed_26  [key=0, label="AST: "];
fixed_8 -> fixed_12  [key=0, label="CFG: "];
fixed_12 -> fixed_13  [key=0, label="CFG: "];
fixed_13 -> fixed_14  [key=0, label="CFG: "];
fixed_14 -> fixed_15  [key=0, label="CFG: "];
fixed_15 -> fixed_16  [key=0, label="CFG: "];
fixed_16 -> fixed_17  [key=0, label="CFG: "];
fixed_17 -> fixed_18  [key=0, label="CFG: "];
fixed_18 -> fixed_19  [key=0, label="CFG: "];
fixed_19 -> fixed_20  [key=0, label="CFG: "];
fixed_20 -> fixed_21  [key=0, label="CFG: "];
fixed_21 -> fixed_22  [key=0, label="CFG: "];
fixed_22 -> fixed_23  [key=0, label="CFG: "];
fixed_23 -> fixed_24  [key=0, label="CFG: "];
fixed_24 -> fixed_25  [key=0, label="CFG: "];
fixed_25 -> fixed_26  [key=0, label="CFG: "];
fixed_26 -> fixed_27  [key=0, label="CFG: "];
fixed_39 -> fixed_40  [key=0, label="AST: "];
fixed_39 -> fixed_41  [key=0, label="AST: "];
fixed_39 -> fixed_41  [key=1, label="CFG: "];
}
