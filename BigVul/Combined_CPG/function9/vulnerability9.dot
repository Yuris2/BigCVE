digraph "&lt;operator&gt;.and" {
21 [label=<(METHOD,phar_compress_filter)<SUB>813</SUB>>];
22 [label=<(PARAM,phar_entry_info * entry)<SUB>813</SUB>>];
23 [label=<(PARAM,int return_unknown)<SUB>813</SUB>>];
24 [label=<(BLOCK,{
	switch (entry-&gt;flags &amp; PHAR_ENT_COMPRESSION_...,{
	switch (entry-&gt;flags &amp; PHAR_ENT_COMPRESSION_...)<SUB>814</SUB>>];
25 [label=<(CONTROL_STRUCTURE,SWITCH,switch(entry-&gt;flags &amp; PHAR_ENT_COMPRESSION_MASK))<SUB>815</SUB>>];
26 [label=<(&lt;operator&gt;.and,entry-&gt;flags &amp; PHAR_ENT_COMPRESSION_MASK)<SUB>815</SUB>>];
27 [label=<(&lt;operator&gt;.indirectFieldAccess,entry-&gt;flags)<SUB>815</SUB>>];
28 [label=<(IDENTIFIER,entry,entry-&gt;flags &amp; PHAR_ENT_COMPRESSION_MASK)<SUB>815</SUB>>];
29 [label=<(FIELD_IDENTIFIER,flags,flags)<SUB>815</SUB>>];
30 [label=<(IDENTIFIER,PHAR_ENT_COMPRESSION_MASK,entry-&gt;flags &amp; PHAR_ENT_COMPRESSION_MASK)<SUB>815</SUB>>];
31 [label="<(BLOCK,{
	case PHAR_ENT_COMPRESSED_GZ:
		return &quot;zlib....,{
	case PHAR_ENT_COMPRESSED_GZ:
		return &quot;zlib....)<SUB>815</SUB>>"];
32 [label=<(JUMP_TARGET,case)<SUB>816</SUB>>];
33 [label="<(IDENTIFIER,PHAR_ENT_COMPRESSED_GZ,{
	case PHAR_ENT_COMPRESSED_GZ:
		return &quot;zlib....)<SUB>816</SUB>>"];
34 [label=<(RETURN,return &quot;zlib.deflate&quot;;,return &quot;zlib.deflate&quot;;)<SUB>817</SUB>>];
35 [label=<(LITERAL,&quot;zlib.deflate&quot;,return &quot;zlib.deflate&quot;;)<SUB>817</SUB>>];
36 [label=<(JUMP_TARGET,case)<SUB>818</SUB>>];
37 [label="<(IDENTIFIER,PHAR_ENT_COMPRESSED_BZ2,{
	case PHAR_ENT_COMPRESSED_GZ:
		return &quot;zlib....)<SUB>818</SUB>>"];
38 [label=<(RETURN,return &quot;bzip2.compress&quot;;,return &quot;bzip2.compress&quot;;)<SUB>819</SUB>>];
39 [label=<(LITERAL,&quot;bzip2.compress&quot;,return &quot;bzip2.compress&quot;;)<SUB>819</SUB>>];
40 [label=<(JUMP_TARGET,default)<SUB>820</SUB>>];
41 [label="<(RETURN,return return_unknown ? &quot;unknown&quot; : NULL;,return return_unknown ? &quot;unknown&quot; : NULL;)<SUB>821</SUB>>"];
42 [label="<(&lt;operator&gt;.conditional,return_unknown ? &quot;unknown&quot; : NULL)<SUB>821</SUB>>"];
43 [label="<(IDENTIFIER,return_unknown,return_unknown ? &quot;unknown&quot; : NULL)<SUB>821</SUB>>"];
44 [label="<(LITERAL,&quot;unknown&quot;,return_unknown ? &quot;unknown&quot; : NULL)<SUB>821</SUB>>"];
45 [label="<(IDENTIFIER,NULL,return_unknown ? &quot;unknown&quot; : NULL)<SUB>821</SUB>>"];
46 [label=<(METHOD_RETURN,char*)<SUB>813</SUB>>];
6 [label=<(METHOD,&lt;global&gt;)<SUB>1</SUB>>];
7 [label=<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>];
8 [label=<(UNKNOWN,int phar_get_entry_data(phar_entry_data **ret, ...,int phar_get_entry_data(phar_entry_data **ret, ...)<SUB>1</SUB>>];
9 [label=<(UNKNOWN,return SUCCESS;,return SUCCESS;)<SUB>151</SUB>>];
10 [label=<(UNKNOWN,},})<SUB>152</SUB>>];
11 [label=<(UNKNOWN,phar_entry_data *phar_get_or_create_entry_data(...,phar_entry_data *phar_get_or_create_entry_data(...)<SUB>158</SUB>>];
12 [label=<(UNKNOWN,int phar_open_archive_fp(phar_archive_data *pha...,int phar_open_archive_fp(phar_archive_data *pha...)<SUB>270</SUB>>];
13 [label=<(UNKNOWN,int phar_copy_entry_fp(phar_entry_info *source,...,int phar_copy_entry_fp(phar_entry_info *source,...)<SUB>291</SUB>>];
14 [label=<(UNKNOWN,int phar_open_entry_fp(phar_entry_info *entry, ...,int phar_open_entry_fp(phar_entry_info *entry, ...)<SUB>335</SUB>>];
15 [label=<(UNKNOWN,int phar_create_writeable_entry(phar_archive_da...,int phar_create_writeable_entry(phar_archive_da...)<SUB>451</SUB>>];
16 [label=<(UNKNOWN,int phar_separate_entry_fp(phar_entry_info *ent...,int phar_separate_entry_fp(phar_entry_info *ent...)<SUB>504</SUB>>];
17 [label=<(UNKNOWN,phar_entry_info * phar_open_jit(phar_archive_da...,phar_entry_info * phar_open_jit(phar_archive_da...)<SUB>553</SUB>>];
18 [label=<(UNKNOWN,PHP_PHAR_API int phar_resolve_alias(char *alias...,PHP_PHAR_API int phar_resolve_alias(char *alias...)<SUB>570</SUB>>];
19 [label=<(UNKNOWN,int phar_free_alias(phar_archive_data *phar, ch...,int phar_free_alias(phar_archive_data *phar, ch...)<SUB>582</SUB>>];
20 [label=<(UNKNOWN,int phar_get_archive(phar_archive_data **archiv...,int phar_get_archive(phar_archive_data **archiv...)<SUB>605</SUB>>];
48 [label=<(METHOD,phar_decompress_filter)<SUB>829</SUB>>];
49 [label=<(PARAM,phar_entry_info * entry)<SUB>829</SUB>>];
50 [label=<(PARAM,int return_unknown)<SUB>829</SUB>>];
51 [label=<(BLOCK,{
	php_uint32 flags;

	if (entry-&gt;is_modified) ...,{
	php_uint32 flags;

	if (entry-&gt;is_modified) ...)<SUB>830</SUB>>];
52 [label="<(LOCAL,php_uint32 flags: php_uint32)<SUB>831</SUB>>"];
53 [label=<(CONTROL_STRUCTURE,IF,if (entry-&gt;is_modified))<SUB>833</SUB>>];
54 [label=<(&lt;operator&gt;.indirectFieldAccess,entry-&gt;is_modified)<SUB>833</SUB>>];
55 [label=<(IDENTIFIER,entry,if (entry-&gt;is_modified))<SUB>833</SUB>>];
56 [label=<(FIELD_IDENTIFIER,is_modified,is_modified)<SUB>833</SUB>>];
57 [label=<(BLOCK,{
		flags = entry-&gt;old_flags;
	},{
		flags = entry-&gt;old_flags;
	})<SUB>833</SUB>>];
58 [label=<(&lt;operator&gt;.assignment,flags = entry-&gt;old_flags)<SUB>834</SUB>>];
59 [label=<(IDENTIFIER,flags,flags = entry-&gt;old_flags)<SUB>834</SUB>>];
60 [label=<(&lt;operator&gt;.indirectFieldAccess,entry-&gt;old_flags)<SUB>834</SUB>>];
61 [label=<(IDENTIFIER,entry,flags = entry-&gt;old_flags)<SUB>834</SUB>>];
62 [label=<(FIELD_IDENTIFIER,old_flags,old_flags)<SUB>834</SUB>>];
63 [label=<(CONTROL_STRUCTURE,ELSE,else)<SUB>835</SUB>>];
64 [label=<(BLOCK,{
		flags = entry-&gt;flags;
	},{
		flags = entry-&gt;flags;
	})<SUB>835</SUB>>];
65 [label=<(&lt;operator&gt;.assignment,flags = entry-&gt;flags)<SUB>836</SUB>>];
66 [label=<(IDENTIFIER,flags,flags = entry-&gt;flags)<SUB>836</SUB>>];
67 [label=<(&lt;operator&gt;.indirectFieldAccess,entry-&gt;flags)<SUB>836</SUB>>];
68 [label=<(IDENTIFIER,entry,flags = entry-&gt;flags)<SUB>836</SUB>>];
69 [label=<(FIELD_IDENTIFIER,flags,flags)<SUB>836</SUB>>];
70 [label=<(CONTROL_STRUCTURE,SWITCH,switch(flags &amp; PHAR_ENT_COMPRESSION_MASK))<SUB>839</SUB>>];
71 [label=<(&lt;operator&gt;.and,flags &amp; PHAR_ENT_COMPRESSION_MASK)<SUB>839</SUB>>];
72 [label=<(IDENTIFIER,flags,flags &amp; PHAR_ENT_COMPRESSION_MASK)<SUB>839</SUB>>];
73 [label=<(IDENTIFIER,PHAR_ENT_COMPRESSION_MASK,flags &amp; PHAR_ENT_COMPRESSION_MASK)<SUB>839</SUB>>];
74 [label="<(BLOCK,{
		case PHAR_ENT_COMPRESSED_GZ:
			return &quot;zli...,{
		case PHAR_ENT_COMPRESSED_GZ:
			return &quot;zli...)<SUB>839</SUB>>"];
75 [label=<(JUMP_TARGET,case)<SUB>840</SUB>>];
76 [label="<(IDENTIFIER,PHAR_ENT_COMPRESSED_GZ,{
		case PHAR_ENT_COMPRESSED_GZ:
			return &quot;zli...)<SUB>840</SUB>>"];
77 [label=<(RETURN,return &quot;zlib.inflate&quot;;,return &quot;zlib.inflate&quot;;)<SUB>841</SUB>>];
78 [label=<(LITERAL,&quot;zlib.inflate&quot;,return &quot;zlib.inflate&quot;;)<SUB>841</SUB>>];
79 [label=<(JUMP_TARGET,case)<SUB>842</SUB>>];
80 [label="<(IDENTIFIER,PHAR_ENT_COMPRESSED_BZ2,{
		case PHAR_ENT_COMPRESSED_GZ:
			return &quot;zli...)<SUB>842</SUB>>"];
81 [label=<(RETURN,return &quot;bzip2.decompress&quot;;,return &quot;bzip2.decompress&quot;;)<SUB>843</SUB>>];
82 [label=<(LITERAL,&quot;bzip2.decompress&quot;,return &quot;bzip2.decompress&quot;;)<SUB>843</SUB>>];
83 [label=<(JUMP_TARGET,default)<SUB>844</SUB>>];
84 [label="<(RETURN,return return_unknown ? &quot;unknown&quot; : NULL;,return return_unknown ? &quot;unknown&quot; : NULL;)<SUB>845</SUB>>"];
85 [label="<(&lt;operator&gt;.conditional,return_unknown ? &quot;unknown&quot; : NULL)<SUB>845</SUB>>"];
86 [label="<(IDENTIFIER,return_unknown,return_unknown ? &quot;unknown&quot; : NULL)<SUB>845</SUB>>"];
87 [label="<(LITERAL,&quot;unknown&quot;,return_unknown ? &quot;unknown&quot; : NULL)<SUB>845</SUB>>"];
88 [label="<(IDENTIFIER,NULL,return_unknown ? &quot;unknown&quot; : NULL)<SUB>845</SUB>>"];
89 [label=<(METHOD_RETURN,char*)<SUB>829</SUB>>];
91 [label=<(UNKNOWN,phar_entry_info *phar_get_entry_info(phar_archi...,phar_entry_info *phar_get_entry_info(phar_archi...)<SUB>853</SUB>>];
92 [label=<(UNKNOWN,phar_entry_info *phar_get_entry_info_dir(phar_a...,phar_entry_info *phar_get_entry_info_dir(phar_a...)<SUB>863</SUB>>];
93 [label="<(LOCAL,static const char[] hexChars: static const char[])<SUB>1034</SUB>>"];
94 [label=<(&lt;operator&gt;.assignment,hexChars[] = &quot;0123456789ABCDEF&quot;)<SUB>1034</SUB>>];
95 [label=<(IDENTIFIER,hexChars,hexChars[] = &quot;0123456789ABCDEF&quot;)<SUB>1034</SUB>>];
96 [label=<(LITERAL,&quot;0123456789ABCDEF&quot;,hexChars[] = &quot;0123456789ABCDEF&quot;)<SUB>1034</SUB>>];
97 [label=<(UNKNOWN,static int phar_hex_str(const char *digest, siz...,static int phar_hex_str(const char *digest, siz...)<SUB>1036</SUB>>];
98 [label=<(UNKNOWN,static int phar_call_openssl_signverify(int is_...,static int phar_call_openssl_signverify(int is_...)<SUB>1053</SUB>>];
99 [label=<(UNKNOWN,int phar_verify_signature(php_stream *fp, size_...,int phar_verify_signature(php_stream *fp, size_...)<SUB>1166</SUB>>];
100 [label=<(METHOD_RETURN,ANY)<SUB>1</SUB>>];
127 [label=<(METHOD,&lt;global&gt;)<SUB>1</SUB>>];
128 [label=<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)>];
129 [label=<(METHOD_RETURN,ANY)>];
143 [label=<(METHOD,&lt;operator&gt;.conditional)>];
144 [label=<(PARAM,p1)>];
145 [label=<(PARAM,p2)>];
146 [label=<(PARAM,p3)>];
147 [label=<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)>];
148 [label=<(METHOD_RETURN,ANY)>];
149 [label=<(METHOD,&lt;operator&gt;.assignment)>];
150 [label=<(PARAM,p1)>];
151 [label=<(PARAM,p2)>];
152 [label=<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)>];
153 [label=<(METHOD_RETURN,ANY)>];
138 [label=<(METHOD,&lt;operator&gt;.indirectFieldAccess)>];
139 [label=<(PARAM,p1)>];
140 [label=<(PARAM,p2)>];
141 [label=<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)>];
142 [label=<(METHOD_RETURN,ANY)>];
133 [label=<(METHOD,&lt;operator&gt;.and)>];
134 [label=<(PARAM,p1)>];
135 [label=<(PARAM,p2)>];
136 [label=<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)>];
137 [label=<(METHOD_RETURN,ANY)>];
21 -> 22  [key=0, label="AST: "];
21 -> 22  [key=1, label="DDG: "];
21 -> 23  [key=0, label="AST: "];
21 -> 23  [key=1, label="DDG: "];
21 -> 24  [key=0, label="AST: "];
21 -> 46  [key=0, label="AST: "];
21 -> 29  [key=0, label="CFG: "];
21 -> 26  [key=0, label="DDG: "];
21 -> 33  [key=0, label="DDG: "];
21 -> 34  [key=0, label="DDG: "];
21 -> 37  [key=0, label="DDG: "];
21 -> 38  [key=0, label="DDG: "];
21 -> 35  [key=0, label="DDG: "];
21 -> 39  [key=0, label="DDG: "];
21 -> 42  [key=0, label="DDG: "];
22 -> 46  [key=0, label="DDG: entry"];
22 -> 26  [key=0, label="DDG: entry"];
23 -> 46  [key=0, label="DDG: return_unknown"];
24 -> 25  [key=0, label="AST: "];
25 -> 26  [key=0, label="AST: "];
25 -> 31  [key=0, label="AST: "];
26 -> 27  [key=0, label="AST: "];
26 -> 30  [key=0, label="AST: "];
26 -> 34  [key=0, label="CFG: "];
26 -> 34  [key=1, label="CDG: "];
26 -> 38  [key=0, label="CFG: "];
26 -> 38  [key=1, label="CDG: "];
26 -> 42  [key=0, label="CFG: "];
26 -> 42  [key=1, label="CDG: "];
26 -> 46  [key=0, label="DDG: entry-&gt;flags"];
26 -> 46  [key=1, label="DDG: entry-&gt;flags &amp; PHAR_ENT_COMPRESSION_MASK"];
26 -> 46  [key=2, label="DDG: PHAR_ENT_COMPRESSION_MASK"];
26 -> 41  [key=0, label="CDG: "];
27 -> 28  [key=0, label="AST: "];
27 -> 29  [key=0, label="AST: "];
27 -> 26  [key=0, label="CFG: "];
29 -> 27  [key=0, label="CFG: "];
31 -> 32  [key=0, label="AST: "];
31 -> 33  [key=0, label="AST: "];
31 -> 34  [key=0, label="AST: "];
31 -> 36  [key=0, label="AST: "];
31 -> 37  [key=0, label="AST: "];
31 -> 38  [key=0, label="AST: "];
31 -> 40  [key=0, label="AST: "];
31 -> 41  [key=0, label="AST: "];
34 -> 35  [key=0, label="AST: "];
34 -> 46  [key=0, label="CFG: "];
34 -> 46  [key=1, label="DDG: &lt;RET&gt;"];
35 -> 34  [key=0, label="DDG: &quot;zlib.deflate&quot;"];
38 -> 39  [key=0, label="AST: "];
38 -> 46  [key=0, label="CFG: "];
38 -> 46  [key=1, label="DDG: &lt;RET&gt;"];
39 -> 38  [key=0, label="DDG: &quot;bzip2.compress&quot;"];
41 -> 42  [key=0, label="AST: "];
41 -> 46  [key=0, label="CFG: "];
41 -> 46  [key=1, label="DDG: &lt;RET&gt;"];
42 -> 43  [key=0, label="AST: "];
42 -> 44  [key=0, label="AST: "];
42 -> 45  [key=0, label="AST: "];
42 -> 41  [key=0, label="CFG: "];
42 -> 41  [key=1, label="DDG: return_unknown ? &quot;unknown&quot; : NULL"];
6 -> 7  [key=0, label="AST: "];
6 -> 100  [key=0, label="AST: "];
6 -> 8  [key=0, label="CFG: "];
6 -> 94  [key=0, label="DDG: "];
7 -> 8  [key=0, label="AST: "];
7 -> 9  [key=0, label="AST: "];
7 -> 10  [key=0, label="AST: "];
7 -> 11  [key=0, label="AST: "];
7 -> 12  [key=0, label="AST: "];
7 -> 13  [key=0, label="AST: "];
7 -> 14  [key=0, label="AST: "];
7 -> 15  [key=0, label="AST: "];
7 -> 16  [key=0, label="AST: "];
7 -> 17  [key=0, label="AST: "];
7 -> 18  [key=0, label="AST: "];
7 -> 19  [key=0, label="AST: "];
7 -> 20  [key=0, label="AST: "];
7 -> 21  [key=0, label="AST: "];
7 -> 48  [key=0, label="AST: "];
7 -> 91  [key=0, label="AST: "];
7 -> 92  [key=0, label="AST: "];
7 -> 93  [key=0, label="AST: "];
7 -> 94  [key=0, label="AST: "];
7 -> 97  [key=0, label="AST: "];
7 -> 98  [key=0, label="AST: "];
7 -> 99  [key=0, label="AST: "];
8 -> 9  [key=0, label="CFG: "];
9 -> 10  [key=0, label="CFG: "];
10 -> 11  [key=0, label="CFG: "];
11 -> 12  [key=0, label="CFG: "];
12 -> 13  [key=0, label="CFG: "];
13 -> 14  [key=0, label="CFG: "];
14 -> 15  [key=0, label="CFG: "];
15 -> 16  [key=0, label="CFG: "];
16 -> 17  [key=0, label="CFG: "];
17 -> 18  [key=0, label="CFG: "];
18 -> 19  [key=0, label="CFG: "];
19 -> 20  [key=0, label="CFG: "];
20 -> 91  [key=0, label="CFG: "];
48 -> 49  [key=0, label="AST: "];
48 -> 49  [key=1, label="DDG: "];
48 -> 50  [key=0, label="AST: "];
48 -> 50  [key=1, label="DDG: "];
48 -> 51  [key=0, label="AST: "];
48 -> 89  [key=0, label="AST: "];
48 -> 56  [key=0, label="CFG: "];
48 -> 71  [key=0, label="DDG: "];
48 -> 76  [key=0, label="DDG: "];
48 -> 77  [key=0, label="DDG: "];
48 -> 80  [key=0, label="DDG: "];
48 -> 81  [key=0, label="DDG: "];
48 -> 78  [key=0, label="DDG: "];
48 -> 82  [key=0, label="DDG: "];
48 -> 85  [key=0, label="DDG: "];
49 -> 89  [key=0, label="DDG: entry"];
49 -> 58  [key=0, label="DDG: entry"];
49 -> 65  [key=0, label="DDG: entry"];
50 -> 89  [key=0, label="DDG: return_unknown"];
51 -> 52  [key=0, label="AST: "];
51 -> 53  [key=0, label="AST: "];
51 -> 70  [key=0, label="AST: "];
53 -> 54  [key=0, label="AST: "];
53 -> 57  [key=0, label="AST: "];
53 -> 63  [key=0, label="AST: "];
54 -> 55  [key=0, label="AST: "];
54 -> 56  [key=0, label="AST: "];
54 -> 62  [key=0, label="CFG: "];
54 -> 62  [key=1, label="CDG: "];
54 -> 69  [key=0, label="CFG: "];
54 -> 69  [key=1, label="CDG: "];
54 -> 58  [key=0, label="CDG: "];
54 -> 60  [key=0, label="CDG: "];
54 -> 67  [key=0, label="CDG: "];
54 -> 65  [key=0, label="CDG: "];
56 -> 54  [key=0, label="CFG: "];
57 -> 58  [key=0, label="AST: "];
58 -> 59  [key=0, label="AST: "];
58 -> 60  [key=0, label="AST: "];
58 -> 71  [key=0, label="CFG: "];
58 -> 71  [key=1, label="DDG: flags"];
58 -> 89  [key=0, label="DDG: entry-&gt;old_flags"];
58 -> 89  [key=1, label="DDG: flags = entry-&gt;old_flags"];
60 -> 61  [key=0, label="AST: "];
60 -> 62  [key=0, label="AST: "];
60 -> 58  [key=0, label="CFG: "];
62 -> 60  [key=0, label="CFG: "];
63 -> 64  [key=0, label="AST: "];
64 -> 65  [key=0, label="AST: "];
65 -> 66  [key=0, label="AST: "];
65 -> 67  [key=0, label="AST: "];
65 -> 71  [key=0, label="CFG: "];
65 -> 71  [key=1, label="DDG: flags"];
65 -> 89  [key=0, label="DDG: entry-&gt;flags"];
65 -> 89  [key=1, label="DDG: flags = entry-&gt;flags"];
67 -> 68  [key=0, label="AST: "];
67 -> 69  [key=0, label="AST: "];
67 -> 65  [key=0, label="CFG: "];
69 -> 67  [key=0, label="CFG: "];
70 -> 71  [key=0, label="AST: "];
70 -> 74  [key=0, label="AST: "];
71 -> 72  [key=0, label="AST: "];
71 -> 73  [key=0, label="AST: "];
71 -> 77  [key=0, label="CFG: "];
71 -> 77  [key=1, label="CDG: "];
71 -> 81  [key=0, label="CFG: "];
71 -> 81  [key=1, label="CDG: "];
71 -> 85  [key=0, label="CFG: "];
71 -> 85  [key=1, label="CDG: "];
71 -> 89  [key=0, label="DDG: flags"];
71 -> 89  [key=1, label="DDG: flags &amp; PHAR_ENT_COMPRESSION_MASK"];
71 -> 89  [key=2, label="DDG: PHAR_ENT_COMPRESSION_MASK"];
71 -> 84  [key=0, label="CDG: "];
74 -> 75  [key=0, label="AST: "];
74 -> 76  [key=0, label="AST: "];
74 -> 77  [key=0, label="AST: "];
74 -> 79  [key=0, label="AST: "];
74 -> 80  [key=0, label="AST: "];
74 -> 81  [key=0, label="AST: "];
74 -> 83  [key=0, label="AST: "];
74 -> 84  [key=0, label="AST: "];
77 -> 78  [key=0, label="AST: "];
77 -> 89  [key=0, label="CFG: "];
77 -> 89  [key=1, label="DDG: &lt;RET&gt;"];
78 -> 77  [key=0, label="DDG: &quot;zlib.inflate&quot;"];
81 -> 82  [key=0, label="AST: "];
81 -> 89  [key=0, label="CFG: "];
81 -> 89  [key=1, label="DDG: &lt;RET&gt;"];
82 -> 81  [key=0, label="DDG: &quot;bzip2.decompress&quot;"];
84 -> 85  [key=0, label="AST: "];
84 -> 89  [key=0, label="CFG: "];
84 -> 89  [key=1, label="DDG: &lt;RET&gt;"];
85 -> 86  [key=0, label="AST: "];
85 -> 87  [key=0, label="AST: "];
85 -> 88  [key=0, label="AST: "];
85 -> 84  [key=0, label="CFG: "];
85 -> 84  [key=1, label="DDG: return_unknown ? &quot;unknown&quot; : NULL"];
91 -> 92  [key=0, label="CFG: "];
92 -> 94  [key=0, label="CFG: "];
94 -> 95  [key=0, label="AST: "];
94 -> 96  [key=0, label="AST: "];
94 -> 97  [key=0, label="CFG: "];
94 -> 100  [key=0, label="DDG: hexChars"];
94 -> 100  [key=1, label="DDG: hexChars[] = &quot;0123456789ABCDEF&quot;"];
97 -> 98  [key=0, label="CFG: "];
98 -> 99  [key=0, label="CFG: "];
99 -> 100  [key=0, label="CFG: "];
127 -> 128  [key=0, label="AST: "];
127 -> 129  [key=0, label="AST: "];
127 -> 129  [key=1, label="CFG: "];
143 -> 144  [key=0, label="AST: "];
143 -> 144  [key=1, label="DDG: "];
143 -> 147  [key=0, label="AST: "];
143 -> 145  [key=0, label="AST: "];
143 -> 145  [key=1, label="DDG: "];
143 -> 148  [key=0, label="AST: "];
143 -> 148  [key=1, label="CFG: "];
143 -> 146  [key=0, label="AST: "];
143 -> 146  [key=1, label="DDG: "];
144 -> 148  [key=0, label="DDG: p1"];
145 -> 148  [key=0, label="DDG: p2"];
146 -> 148  [key=0, label="DDG: p3"];
149 -> 150  [key=0, label="AST: "];
149 -> 150  [key=1, label="DDG: "];
149 -> 152  [key=0, label="AST: "];
149 -> 151  [key=0, label="AST: "];
149 -> 151  [key=1, label="DDG: "];
149 -> 153  [key=0, label="AST: "];
149 -> 153  [key=1, label="CFG: "];
150 -> 153  [key=0, label="DDG: p1"];
151 -> 153  [key=0, label="DDG: p2"];
138 -> 139  [key=0, label="AST: "];
138 -> 139  [key=1, label="DDG: "];
138 -> 141  [key=0, label="AST: "];
138 -> 140  [key=0, label="AST: "];
138 -> 140  [key=1, label="DDG: "];
138 -> 142  [key=0, label="AST: "];
138 -> 142  [key=1, label="CFG: "];
139 -> 142  [key=0, label="DDG: p1"];
140 -> 142  [key=0, label="DDG: p2"];
133 -> 134  [key=0, label="AST: "];
133 -> 134  [key=1, label="DDG: "];
133 -> 136  [key=0, label="AST: "];
133 -> 135  [key=0, label="AST: "];
133 -> 135  [key=1, label="DDG: "];
133 -> 137  [key=0, label="AST: "];
133 -> 137  [key=1, label="CFG: "];
134 -> 137  [key=0, label="DDG: p1"];
135 -> 137  [key=0, label="DDG: p2"];
}
